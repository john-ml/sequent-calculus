sequent calculus language thing

Types
  τ ∷= 0 | 1
     | τ + ..
     | τ × ..
     | ¬ τ
     | (σ, .. ⊢ τ, ..)

Typing contexts
  Γ, Δ ∷= · | Γ, x : τ

Terms
     
  e ∷=

     Variables
     | [k]x
     | cut τ (κ k. e₁) (λ x. e₂)
       =: let x : τ = κ k. e₁ in e₂
       =: let k : τ = λ x. e₂ in e₁

     Unit and zero
     | absurd x
     | [k]★

     Products
     | [k](κ h. e, ..)
     | let (y, ..) = x in e

     Sums
     | let [j, ..] = k in e
     | case x of y -> e | .. end

     Negation
     | let x -> k in e
     | let x <- k in e

     Sequents
     | [k](λ x .. . κ j .. . e)
     | case x (κ k. e₁) .. of y -> e₂ | .. end

Typing judgment Γ ⊢ e ⊣ Δ

  Axiom (context lookup)

    ——————————————————————————
    Γ, x : τ ⊢ [k]x ⊣ k : τ, Δ
 
       Γ ⊢ [k]x ⊣ Δ
    ——————————————————— x ≠ y
    Γ, y : τ ⊢ [k]x ⊣ Δ
 
       Γ ⊢ [k]x ⊣ Δ
    ——————————————————— j ≠ k
    Γ ⊢ [k]x ⊣ j : τ, Δ

  Cut

    Γ ⊢ e₁ ⊣ k : τ, Δ    Γ, x : τ ⊢ e₂ ⊣ Δ
    ——————————————————————————————————————
      Γ ⊢ cut τ (κ k. e₁) (λ x. e₂) ⊣ Δ

  Unit and zero

    ——————————————————    ——————————————
    x : 0 ⊢ absurd x ⊣    ⊢ [k]★ ⊣ k : 1

  Products

          Γ ⊢ e ⊣ j : τ, Δ    ..
    ———————————————————————————————————
    Γ ⊢ [k](κ j. e, ..) ⊣ k : τ × .., Δ

              Γ, y : τ, .. ⊢ e ⊣ Δ
    ————————————————————————————————————————
    Γ, x : τ × .. ⊢ let (y, ..) = x in e ⊣ Δ

  Sums

              Γ ⊢ e ⊣ j : τ, .., Δ
    ————————————————————————————————————————
    Γ ⊢ let [j, ..] = k in e ⊣ k : τ + .., Δ

             Γ, y : σ ⊢ e ⊣ Δ    ..
    —————————————————————————————————————————
    Γ, x : τ + .. ⊢ case x of y -> e | .. end

  Negation

            Γ ⊢ e ⊣ k : τ, Δ
    ————————————————————————————————
    Γ, x : ¬ τ ⊢ let x -> k in e ⊣ Δ

            Γ, x : τ ⊢ e ⊣ Δ
    ————————————————————————————————
    Γ ⊢ let x <- k in e ⊣ k : ¬ τ, Δ

  Sequents

               Γ, x : σ, .. ⊢ e ⊣ j : τ, .., Δ
    —————————————————————————————————————————————————————
    Γ ⊢ [k](λ x .. . κ j .. . e) ⊣ k : (σ, .. ⊢ τ, ..), Δ

             Γ ⊢ e₁ ⊣ k : σ, Δ    ..    Γ, y : τ ⊢ e₂ ⊣ Δ    ..
    ————————————————————————————————————————————————————————————————————
    Γ, x : (σ, .. ⊢ τ, ..) ⊢ case x (κ k. e₁) .. of y -> e₂ | .. end ⊣ Δ

Conversion to LC

  [[ _ ]] : term → lc_term such that

    .., x : σ ⊢ e ⊣ k : τ, .. →
    ∀ R. .., x : [[σ]]R, .., k : [[τ]]R → R ⊢ [[e]] : R where

            [[ 0 ]] R = 0
            [[ 1 ]] R = 1
       [[ τ + .. ]] R = [[ τ ]] R + ..
       [[ τ × .. ]] R = [[ τ ]] R × ..
        [[ σ → τ ]] R = [[ σ ]] R → ([[ τ ]] R → R) → R
          [[ ¬ τ ]] R = [[ τ ]] R → R
[[ σ, .. ⊢ τ, .. ]] R = [[ σ ]] R → .. → ([[ τ ]] R → R) → .. → R

                                   [[ [k]x ]] = k x
              [[ cut _ (κ k. e₁) (λ x. e₂) ]] = (λ k. [[e₁]]) (λ x. [[e₂]])
                                   [[ [k]★ ]] = k ★
                        [[ [k](κ j. e, ..) ]] = (λ j. [[e]]) (λ v. .. (λ .. . k (v, ..)))
                   [[ let (y, ..) = x in e ]] = let (y, ..) = x in [[e]]
                   [[ let [j, ..] = k in e ]] = (λ j .. . [[e]]) (λ v. k (ι₁ v)) ..
              [[ case x of y -> e | .. end ]] = case x of ι₁ y -> [[e]] | .. end
                        [[ let x -> k in e ]] = (λ k. [[e]]) x
                        [[ let x <- k in e ]] = k (λ x. [[e]])
               [[ [k](λ x .. . κ j .. . e) ]] = k (λ x .. j .. . [[e]])
[[ case x (κ k. e₁) .. of y -> e₂ | .. end ]] = x (λ k. [[e₁]]) .. (λ y. [[e₂]]) ..

Negation
  What do (let x -> k in e) and (let x <- k in e) do? Rough guesses:
    let x -> k in e:
      x : ¬ τ is a captured continuation
      k : τ is a way to invoke the captured continuation in e
    let x <- k in e:
      k : ¬ τ is a suspended computation of τ
      x : τ is the result of resuming k
  Analogues for
    Γ ⊢ ¬ τ, Δ    Γ, ¬ τ ⊢ Δ
    ——————————    ——————————
     Γ, τ ⊢ Δ      Γ ⊢ τ, Δ
  as derived rules:
                                    ————————————————————
                                    x : τ ⊢ [k]x ⊣ k : τ
                            —————————————————————————————————————
      Γ ⊢ _ ⊣ j : ¬ τ, Δ    x : τ, y : ¬ τ ⊢ let y -> k in [k]x ⊣
      ———————————————————————————————————————————————————————————
       Γ, x : τ ⊢ let j : ¬ τ = λ y. let y -> k in [k]x in _ ⊣ Δ
    and
             ————————————————————
             j : τ ⊢ [k]y ⊣ k : τ
      —————————————————————————————————————
      ⊢ let y <- j in [k]y ⊣ j : ¬ τ, k : τ    Γ, x : ¬ τ ⊢ _ ⊣ Δ
      ———————————————————————————————————————————————————————————
      Γ ⊢ let x : ¬ τ = (κ j. let y <- j in [k]y) in _ ⊣ k : τ, Δ
  What control operators do these derived rules correspond to?
    [[ let j : ¬ τ = λ y. let y -> k in [k]x in _ ]]
      = (λ j. [[_]]) (λ y. [[ let y -> k in [k]x ]]
      = (λ j. [[_]]) (λ y. (λ k. k x) y)
      = (λ j. [[_]]) (λ y. y x)
      = let j = λ y. y x in [[_]]
      The value (x : τ) gets rewritten in CPS as (j := λ y. y x).
      Not very useful...
    [[ let x : ¬ τ = (κ j. let y <- j in [k]y) in _ ]]
      = (λ j. [[ let y <- j in [k]y ]]) (λ x. [[_]])
      = (λ j. j (λ y. k y)) (λ x. [[_]])
      = (λ j. j k) (λ x. [[_]])
      = let x = k in [[_]]
      The continuation k : τ is captured in x : ¬ τ.
  What does double negation do?
    Introduction: [[ let y : ¬ ¬ τ = (κ k. let z <- k in let z -> j in [j]x) in _ ]]
      = (λ k. [[ let z <- k in let z -> j in [j]x ]]) (λ y. [[_]])
      = (λ k. k (λ z. [[ let z -> j in [j]x ]])) (λ y. [[_]])
      = (λ k. k (λ z. (λ j. j x) z)) (λ y. [[_]])
      = (λ k. k (λ z. z x)) (λ y. [[_]])
      = (λ y. [[_]]) (λ z. z x)
      = let y = λ z. z x in [[_]]
      Computation of x is suspended in (y : ¬ ¬ τ).
      In this case nothing interesting happens because (x : τ) is already a value.
      If [j]x were replaced by an arbitrary expression e...
        [[ let y : ¬ ¬ τ = (κ k. let z <- k in let z -> j in e) in _ ]]
          = (λ k. [[ let z <- k in let z -> j in e ]]) (λ y. [[_]])
          = (λ k. k (λ z. [[ let z -> j in e ]])) (λ y. [[_]])
          = (λ k. k (λ z. (λ j. [[e]]) z)) (λ y. [[_]])
          = (λ k. k (λ j. [[e]])) (λ y. [[_]])
          = (λ y. [[_]]) (λ j. [[e]])
          = let y = λ j. [[e]] in [[_]]
      The whole computation [[e]] is suspended (assuming CBV).
    Elimination: [[ let (x : ¬ ¬ τ) -> k in let y <- k in _ ]]
      = (λ k. [[ let y <- k in _ ]]) x
      = (λ k. k (λ y. [[_]])) x
      = x (λ y. [[_]])
      Resume a suspension (x : ¬ ¬ τ)

Cocurrying?
  Currying: p → q → r ≡ p × q → r
  Want infixl (←) s.t. p ← q ← r ≡ p ← q + r
  p ← q := ¬ (p → q) ≡ p × ¬ q works:
    p ← q ← r
      ≡ ¬ (¬ (p → q) → r)
      ≡ p × ¬ q × ¬ r
      ≡ p × ¬ (q + r)
      ≡ p ← q + r
  So p → .. → q → 1 ← r ← .. ← s
   ≡ p × .. × q → r + .. + s

β-laws
  Sums (k ∉ FV(e₁), x ∉ FV(e₂) ∪ FV(e₃))
    let x : σ + τ = κ k.
      let [h, j] = k in e₁
    in
    case x of y -> e₂ | z -> e₃ end
    -->
    let h : σ = λ y. e₂ in
    let j : τ = λ z. e₃ in
    e₁
  Products (k ∉ FV(e₁) ∪ FV(e₂), x ∉ FV(e₃))
    let x : σ × τ = κ k. [k](κ h. e₁, κ j. e₂) in
    let (y, z) = x in
    e₃
    -->
    let y : σ = κ h. e₁ in
    let z : σ = κ j. e₂ in
    e₃
  Functions (k ∉ FV(e₁), f ∉ FV(e₂) ∪ FV(e₃))
    let f : σ → τ = κ k. [k](λ x. κ h. e₁) in
    let y = f (κ j. e₂) in
    e₃
    -->
    let x : σ = κ j. e₂ in
    let y : τ = κ h. e₁ in
    e₃
  Sequents (k ∉ FV(e₁), f ∉ FV(e₂) ∪ .. ∪ FV(e₃) U ..)
    let f : (σ, .. ⊢ τ, ..) = κ k. [k](λ x ... κ j ... e₁) in
    case f (κ h. e₂) .. of y -> e₃ | .. end
    -->
    let x : σ = κ h. e₂ in
              .
              .
    let j : τ = λ y. e₃ in
               .
               .
    e₁

Cut elimination
  Variables
    let x : τ = κ k. [k]y in e
    --> e[y/x]
  Unit
    let x : 1 = κ. [k]★ in e
    --> e[★/x]
  Zero
    let x : τ = κ. absurd y in e
    --> absurd y
  Sums, Products, Functions, Sequents: use β-laws
  Negation L
    let x : τ = κ k.
      let y -> j in e₁
    in e₂
    -->
    let y -> j in
    let x : τ = κ k. e₁ in
    e₂
  Negation R
    let x : τ = κ k.
       let y <- j in e₁
    in e₂
    -->
    let y <- j in
    let x : τ = κ k. e₁ in
    e₂
  Are these last 2 actually OK to do?
    Negation L
      [[ let x = κ k. let y -> j in e₁ in e₂ ]]
        = (λ k. [[ let y -> j in e₁ ]]) (λ x. [[e₂]])
        = (λ k. (λ j. [[e₁]]) y) (λ x. [[e₂]])
        = let k = λ x. [[e₂]] in let j = y in [[e₁]]
        = let j = y in let k = λ x. [[e₂]] in [[e₁]]
        = let j = y in (λ k. [[e₁]]) (λ x. [[e₂]])
        = let j = y in [[ let x = κ k. e₁ in e₂ ]]
        = [[ let y -> j in let x = κ k. e₁ in e₂ ]]
      Can swap let bindings for j and k
    Negation R
      [[ let x = κ k. let y <- j in e₁ in e₂ ]]
        = (λ k. [[ let y <- j in e₁ ]]) (λ x. [[e₂]])
        = (λ k. j (λ y. [[e₁]])) (λ x. [[e₂]])
        = let k = λ x. [[e₂]] in j (λ y. [[e₁]])
        = j (λ y. let k = λ x. [[e₂]] in [[e₁]])
        = j (λ y. (λ k. [[e₁]]) (λ x. [[e₂]]))
        = j (λ y. [[ let x = κ k. e₁ in e₂ ]])
        = [[ let y <- j in let x = κ k. e₁ in e₂ ]]
      Can push let binding for k into j's continuation

η-laws
  Sums
    case x of ι₁ y -> let [h, _] = k in [h]y | ι₂ z -> let [_, j] = k in [j]z end
    --> [k]x
  Products
    let (y, z) = x in [k](κ h. [h]y, κ j. [j]z)
    --> [k]x
  Functions
    [k](λ x. κ h. let y = f (κ j. [j]x) in h[y])
    --> [k]f
